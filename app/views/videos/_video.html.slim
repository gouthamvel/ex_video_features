p#notice
  = notice

- video = @videos.to_a.shift
- unless video
  .row
    .cols-md-12.col-md-offset-2
      .center-block
        H3
          | Video library is empty Go ahead and &nbsp;
          = link_to 'Upload a Video', new_video_path, class: "btn btn-default"
- else
  .row
    .col-md-1
    .col-md-11
      = link_to 'Upload Video', new_video_path, class: "btn btn-default"
  .row
    .col-md-1
    .col-md-11
      h3
        | Listing Videos
  .row
    .col-md-1
    .col-md-11
      = "#{video.title} By #{video.user.email}" if video
  .row
    .col-md-1
    .col-md-7
      .preview_video_box
        .video-js-box
          - type = v.video_url.match(/.*\.(.*)$/)[1]
          video.video-js.vjs-default-skin#video_player controls="true" preload="auto" width="100%" height="340px" poster="http://video-js.zencoder.com/oceans-clip.png" data-setup="{}" data-comment="#{video.markers.to_json}"
            source src="#{video.video_url}" type="video/#{type}"

    .col-md-4
      ul.list-group
        - @videos.each do |video|
          a href="#{video_path(video)}"
            li.list-group-item
              .title
                = video.title
              .email
                | By
                = video.user.email
              .comments data-comment="#{video.markers.to_json}"
  br
  .row
    .col-md-1
    .col-md-1
      .btn.btn-default.btn-xs.comment_on_video Comment
    .col-md-2
      .btn-group.btn-group-xs
        .btn.btn-default#repeat_reset_button
          .glyphicon.glyphicon-repeat
        .btn.btn-default#repeat_a
          .glyphicon.glyphicon-hand-down
        .btn.btn-default#repeat_b
          .glyphicon.glyphicon-hand-down
    .col-md-2
      .btn-group.btn-group-xs
        .btn.btn-default
          .glyphicon.glyphicon-flash#speed_display 1X
        .btn.btn-default#speed_up
          .glyphicon.glyphicon-chevron-up
        .btn.btn-default#speed_down
          .glyphicon.glyphicon-chevron-down

  .row
    .col-md-1
    .col-md-11
      #comment_notice.well.well-sm

  .hide#comment_form_template
    = form_for([video, video.comments.new], remote: true) do |f|
      .field
        = f.label :comment
        #comment_timestamp
        br
        = f.text_area :content, cols: 60, rows: 6
        = hidden_field(:comment, :time)
      .actions
        = f.submit

  .row
    .col-md-1
    .col-md-11
      #comment_form
  .row
    .col-md-1
    .col-md-11
      .comment#comment_viewer
        span.time
          | Comment at time &nbsp;
          span.value
        .well.well-lg.comment
          | Comments appear here
